#!/usr/bin/env bash
# 
# File:
#   openurl
# 
# Description:
#   Open one or more URLs from the terminal directly or with an alias or search
#   query.
# 
# Dependencies:
#   Perl module "URI::Escape"
#       (Run "cpan URI::Escape" to install.)
# 
#   Xterm
#       Xterm is the terminal emulator program used to open terminal windows for
#       hosting terminal web browsers processes. For quick and easy start up,
#       simply download it. If another terminal emulator is preferred, please
#       adjust the command in the TERMINAL function under CONFIGURATIONS.
# 

readonly HERE="$(dirname "${0}")"

# ======= CONFIGURATIONS ==============

# Directory where URL aliases files are stored.
readonly URL_ALIASES_FILES_DIRECTORY="${HERE}"

# URL aliases files
readonly URL_ALIASES_FILES=(
  'aliases'
)

# GUI and terminal web browser commands
# Options:
#   1. All URLs for a browser command are opened in a single run. To open each
#      URL for a browser command independently, prepend two colons ("::") to the
#      browser command. Note: This applies only to GUI browsers.
#   2. To run a command after the browser command has run, append two semicolons
#      (";;") to the browser command followed by the command to run. Note: This
#      applies to both GUI and terminal browsers. Note: The command will run
#      once regardless if option #1 is used.
readonly BROWSER_GUI1='/usr/bin/firefox'
readonly BROWSER_GUI2='/usr/bin/firefox -private-window'
readonly BROWSER_GUI3='/usr/bin/chromium'
readonly BROWSER_GUI4='/usr/bin/chromium --incognito'
readonly BROWSER_GUI5=''
readonly BROWSER_GUI6=''
readonly BROWSER_GUI7=''
readonly BROWSER_GUI8=''
readonly BROWSER_GUI9=''
readonly BROWSER_TERM1='/usr/bin/w3m'
readonly BROWSER_TERM2='/usr/bin/w3m -s +120'
readonly BROWSER_TERM3='/usr/bin/lynx --accept_all_cookies'
readonly BROWSER_TERM4=''
readonly BROWSER_TERM5=''
readonly BROWSER_TERM6=''
readonly BROWSER_TERM7=''

# Whether or not to use all arguments as a search query with the default search
# URL if the first argument does not match any alias; will exit otherwise.
readonly SEARCH_IF_ALIAS_NOT_FOUND=true

# Default search URL
readonly DEFAULT_SEARCH_URL='https://www.google.com/search?q={search\+}'

# Top level domains used to match URLs
readonly URL_MATCH_TOP_LEVEL_DOMAINS='.com .org .edu .gov .uk .net'

# Terminal emulator used for opening terminal windows
TERMINAL() {
  local startX=50; local startY=100; local width=110; local height=44

  nohup xterm -xrm 'XTerm.vt100.allowTitleOps: false' -geometry \
      "${width}x${height}+${startX}+${startY}" -fg '#FFFFFF' -bg '#000000' -fa \
      'size=12:antialias=true' -title "${1}" -e bash -c \
      "eval ${@:2};"' rs=$? && [ $rs -ne 0 ] && sleep 3' &>/dev/null &
}

# Whether or not to open all URLs for a terminal browser in their own individual
# terminal windows; if not, they will be opened in the same terminal window for
# their browser. (The latter works well with browsers that use switchable
# buffers, such as w3m; if a browser does not support buffers, it may not work
# well.) Note: This configuration will not apply when the dump option is used
# as each URL will always be dumped to its own individual terminal window).
readonly OPEN_TERM_BROWSER_URLS_IN_INDIVIDUAL_WINDOWS=false

# Default options used for less when dumping a webpage
readonly LESS_COMMAND_OPTIONS='-IFRXMc'

# ======= ! CONFIGURATIONS ==============

printHelpMessage() {
  [ "${1}" = 'full' ] && echo -e 'Openurl\n'
  echo -ne "\
Usage:
  1. openurl [options] <url_alias> [search_queries]
  2. openurl [options] <search_query>
         If a URL alias is not found, all arguments  will be
         used as search queries with the default search URL
         (this can be changed in CONFIGURATIONS).
  3. openurl [options] <websites/URLs...>
         If any of the arguments begin with \"http[s]://\",
         \"ftp://\" or \"file://\" or end with any of the top
         level domains defined by URL_MATCH_TOP_LEVEL_DOMAINS
         under CONFIGURATIONS, each will be openeded as a URL
         directly.

Options:
  Argument processing:
    -m, --multiple-aliases
                match each consecutive argument as an alias until the last one
                is found and use the remaining arguments as search queries

  Output processing:
    -g<1-9>, --gui<1-9> 
                open in the GUI browser of the given number
    -t<1-7>, --term<1-7>
                open in the terminal browser of the given
                number
    -d, -dump[+NUM_PAGES]
                dump the output of each URL to a terminal
                window (using terminal browser 1 by
                default); optionally jump forward the
                given number of pages
    -c, --clipboard
                output all URLs to the X11 clipboard and run
                nothing

  Other:
    -l, --list    list current browser commands
    -h, --help    show help message

Notes:
  Search queries are delimited by \"%%\".
  
  Using any of the browser type or the dump
  option(s) will override all alias and URL
  configuration options in the URL aliases file.
  
  An unsafe URL character in a search query
  will be encoded. This can be prevented by
  escaping it with two backslashes.
"
}

listBrowserCommands() {
  local mesg='Openurl current browser commands:'
  for i in {1..9}; do
    local brwsrVar="BROWSER_GUI${i}"
    local browser="${!brwsrVar}"
    mesg+="\nGUI ${i}: ${browser}"
  done
  for i in {1..7}; do
    brwsrVar="BROWSER_TERM${i}"
    browser="${!brwsrVar}"
    mesg+="\nTERM ${i}: ${browser}"
  done
  echo -e "${mesg}"
}

# printBrowserVariableNotDefinedMessage:
#   Print an error message for the browser variable not being defined.
#   Parameters:
#     1. How the browser was selected: "alias" for alias, "url" for url and ""
#        for an argument option. 
#     2. Alias name; empty otherwise
#     3. Browser type (e.g. "gui1", "gui4", "term3")
printBrowserVariableNotDefinedMessage() {
  local brwsrTypeCaps="$(echo -n "${3}" | tr '[:lower:]' '[:upper:]')"

  echo -n 'openurl: '
  if [ "${1}" = 'alias' ]; then
    echo -e "Browser ${brwsrTypeCaps} selected for alias\n "\
        "\"${2}\" in one of the URL aliases\n "\
        "files and variable BROWSER_${brwsrTypeCaps} is not\n "\
        "defined." 1>&2
  elif [ "${1}" = 'url' ]; then
    echo -e "Browser ${brwsrTypeCaps} selected for a URL\n "\
        "in one of the URL aliases files and\n "\
        "variable BROWSER_${brwsrTypeCaps} is not defined." 1>&2
  else
    echo -e "Browser ${brwsrTypeCaps} selected and variable\n "\
        "BROWSER_${brwsrTypeCaps} is not defined." 1>&2
  fi
  echo -e "  Please define variable BROWSER_${brwsrTypeCaps} in\n "\
      "section Configurations."
}

# printBrowserCommandDoesNotExistMessage:
#   Print an error message for a browser command not existing.
#   Parameters:
#     1. How the browser was selected: "alias" for alias, "url" for url and ""
#        for an argument option.
#     2. Alias name; empty otherwise
#     3. Browser type (e.g. "gui1", "gui4", "term3")
printBrowserCommandDoesNotExistMessage() {
  local brwsrTypeCaps="$(echo -n "${3}" | tr '[:lower:]' '[:upper:]')"
  local brwsrCmdVar="BROWSER_${brwsrTypeCaps}"
  local brwsrCmdStart="${!brwsrCmdVar%%' '*}"

  echo -n 'openurl: '
  if [ "${1}" = 'alias' ]; then
    echo -e "Browser ${brwsrTypeCaps} selected for alias\n "\
        "\"${2}\" in one of the URL aliases\n "\
        "files and command \"${brwsrCmdStart}\"\n "\
        "assigned to variable BROWSER_${brwsrTypeCaps} does not\n "\
        "exist." 1>&2
  elif [ "${1}" = 'url' ]; then
    echo -e "Browser ${brwsrTypeCaps} selected for a URL\n "\
        "in one of the URL aliases files and command\n "\
        "\"${brwsrCmdStart}\" assigned to variable\n "\
        "BROWSER_${brwsrTypeCaps} does not exist." 1>&2
  else
    echo -e "Browser ${brwsrTypeCaps} selected and command\n "\
        "\"${brwsrCmdStart}\" assigned to variable\n "\
        "BROWSER_${brwsrTypeCaps} does not exist." 1>&2
  fi
  echo -e "  Please fix the command assigned to\n "\
      "BROWSER_${brwsrTypeCaps} in section Configurations."
}

# ============================================
#   Initialize main variables
# ============================================

# DEFAULT/ALIAS CONFIGURATIONS: Congiurations for URL opening assigned by either
# argument or alias/URL configuration options

# Default browser command
BROWSER_COMMAND="${BROWSER_GUI1}"
# Whether or not to dump the page (it is likely not preferrable to set this to
# true by default)
DUMP=false
# Number of pages to skip forward after dumping a URL's output.
DUMP_PG_FWD=0

# UTILITY VARIABLES

# Current browser type
BROWSER_COMMAND_BROWSER_TYPE='GUI' # 'GUI' or 'TERM'; change accordingly if
                                   # initial/default browser is changed.

# ============================================
#   Process options and arguments
# ============================================

OPTS="$(getopt -a -o d::,m,c,l,h --long gui1,gui2,gui3,gui4,gui5,gui6,gui7 \
    --long gui8,gui9,g1,g2,g3,g4,g5,g6,g7,g8,g9,term1,term2,term3,term4,term5 \
    --long term6,term7,t1,t2,t3,t4,t5,t6,t7,multiple-aliases,clipboard,list \
    --long help -n 'openurl' -- "${@}")"
[ "$?" -ne 0 ] && exit 1
eval set -- "${OPTS}"

while true; do
  case "${1}" in
    --gui?|--g?)
        [ -z "${1##'--gui'*}" ] && brwsrNum="${1:5}" || brwsrNum="${1:3}"
        brwsrVar="BROWSER_GUI${brwsrNum}"
        BROWSER_COMMAND="${!brwsrVar}"
        BROWSER_COMMAND_BROWSER_TYPE='GUI'
        CONFIG_OPT_SET=true
        ;;
    --term?|--t?)
        [ -z "${1##'--term'*}" ] && brwsrNum="${1:6}" || brwsrNum="${1:3}"
        brwsrVar="BROWSER_TERM${brwsrNum}"
        BROWSER_COMMAND="${!brwsrVar}"
        BROWSER_COMMAND_BROWSER_TYPE='TERM'
        CONFIG_OPT_SET=true
        ;;
    -dump|-d)
        DUMP=true
        CONFIG_OPT_SET=true
        if [ -n "${2}" ]; then
          arg="${2}"
          [[ "${arg}" = 'ump'* ]] && arg="${arg#'ump'}"
          if [[ "${arg}" =~ ^\+([0-9]{1,3}(\.[0-9])?)$ ]]; then
            DUMP_PG_FWD="${BASH_REMATCH[1]}"
          elif [ -n "${arg}" ]; then
            echo "openurl: invalid option '${1}${2}'" 1>&2; exit 1;
          fi
        fi
        shift
        ;;
    --multiple-aliases|-m) OPT_MULTIPLE_ALIASES=true;;
    --clipboard|-c) OPT_OUTPUT_TO_CLIPBOARD=true;;
    --list|-l) listBrowserCommands; exit;;
    --help|-h) printHelpMessage full; exit;;
    --) shift; break;;
    *) break;;
  esac
  shift
done

if [ "$#" -eq 0 ] && [ "${DUMP}" = 'true' ]; then
  echo 'openurl: cannot use option "dump" without arguments' 1>&2
  exit 1
fi

if [ "${OPT_MULTIPLE_ALIASES}" = 'true' ] && [ $# -eq 0 ]; then
  echo -e 'openurl: one or more aliases required\n  with option -m' 1>&2
  exit 1
fi

if [ -z "${BROWSER_COMMAND}" ]; then
  printBrowserVariableNotDefinedMessage '' '' \
      "${BROWSER_COMMAND_BROWSER_TYPE}${brwsrNum}"
  exit 1
elif ! command -v "${BROWSER_COMMAND%%' '*}" >/dev/null 2>&1; then
  printBrowserCommandDoesNotExistMessage '' '' \
      "${BROWSER_COMMAND_BROWSER_TYPE}${brwsrNum}"
  exit 1
fi

if [ "${DUMP}" = 'true' ] && [ "${BROWSER_COMMAND_BROWSER_TYPE}" = 'GUI' ]; then
  BROWSER_COMMAND="${BROWSER_TERM1}"
  BROWSER_COMMAND_BROWSER_TYPE='TERM'
fi

# ============================================
#   Check prerequisites
# ============================================

for urlAliasesFile in "${URL_ALIASES_FILES[@]}"; do
  path="${URL_ALIASES_FILES_DIRECTORY}/${urlAliasesFile}"
  if [ ! -f "${path}" ]; then
    echo -e "openurl: URL aliases file not found:\n  '${path}'" 1>&2
    exit 1
  fi
  URL_ALIASES_FILES_STR+="${urlAliasesFile}|"
done

# ============================================
#   Create the main functions
# ============================================

# processAliasConfigurations:
#   Define the global configurations from the configuration values of an alias.
processAliasConfigurations() {
  for aliasOpt in ${ALIAS_OPTS[@]}; do
    case "${aliasOpt}" in
      browser*)
        local brwsrVal="${aliasOpt#*=}"
        local brwsrValCaps="$(echo -n "${brwsrVal}"|tr '[:lower:]' '[:upper:]')"
        local brwsrVar="BROWSER_${brwsrValCaps}"
        BROWSER_COMMAND="${!brwsrVar}"
        BROWSER_COMMAND_BROWSER_TYPE="${brwsrValCaps%[0-9]}"

        [ -z "${BROWSER_COMMAND}" ] && printBrowserVariableNotDefinedMessage \
            'alias' "${1}" "${brwsrVal}" && exit 1
        ! command -v "${BROWSER_COMMAND%%' '*}" >/dev/null 2>&1 && \
            printBrowserCommandDoesNotExistMessage 'alias' "${1}" \
            "${brwsrVal}" && exit 1
        ;;
      dump*)
        DUMP=true
        if [[ "${aliasOpt}" = 'dump+'* ]]; then
          DUMP_PG_FWD="${aliasOpt#*+}"
        fi
        if [ -z "${brwsrVar}" ]; then
          BROWSER_COMMAND="${BROWSER_TERM1}"
          BROWSER_COMMAND_BROWSER_TYPE='TERM'
        fi
        ;;
    esac
  done
}

# createBrowserCommandUrlsHashes:
#   Create hashes for URLs using the same browser command and URLs that are to
#   dump their output and process their configuration values.
createBrowserCommandUrlsHashes() {
  for url_urlOpts in ${URLS_URLSOPTS[@]}; do
    local url_urlOptsArr=(${url_urlOpts//'<>'/ })
    if [[ "${#url_urlOptsArr[@]}" -eq 1 || "${CONFIG_OPT_SET}" = 'true' ]]; then
      if [ "${DUMP}" != 'true' ]; then
        local key="${BROWSER_COMMAND}%%${BROWSER_COMMAND_BROWSER_TYPE}"
        BROWSER_URL_HASHES["${key}"]+=" ${url_urlOptsArr[0]}"
      else
        # add the dump page forward value so that it can be retrieved later
        [ "${DUMP_PG_FWD}" -ne 0 ] && local addPgFwd="<>${DUMP_PG_FWD}";
        local hashVal=" ${url_urlOptsArr[0]}${addPgFwd}"
        BROWSER_URL_DUMP_HASHES["${BROWSER_COMMAND}"]+="${hashVal}"
      fi
    else
      local brwsrVal=
      local hasDumpOpt=
      local pgFwdVal=
      for urlOpt in ${url_urlOptsArr[@]:1}; do
        case "${urlOpt}" in
          browser*) brwsrVal="${urlOpt#*=}";;
          dump*)
            hasDumpOpt=true
            [[ "${urlOpt}" = 'dump+'* ]] && pgFwdVal="${urlOpt#*+}"
            ;;
        esac
      done

      if [[ "${hasDumpOpt}" = 'true' && -z "${brwsrVal}" ]]; then
        brwsrVal='term1'
      fi

      local brwsrValCaps="$(echo -n "${brwsrVal}" | tr '[:lower:]' '[:upper:]')"
      local brwsrVar="BROWSER_${brwsrValCaps}"
      local brwsr="${!brwsrVar}"
      local brwsrType="${brwsrValCaps%[0-9]}"

      [ -z "${brwsr}" ] && printBrowserVariableNotDefinedMessage 'url' '' \
          "${brwsrVal}" && exit 1
      ! command -v "${brwsr%%' '*}" >/dev/null 2>&1 && \
          printBrowserCommandDoesNotExistMessage 'url' '' "${brwsrVal}" && \
          exit 1

      if [[ ( "${hasDumpOpt}" = 'true' || "${DUMP}" = 'true' ) && ${brwsrType} \
          != 'GUI' ]]; then
        unset addPgFwd
        if [ "${hasDumpOpt}" = 'true' ]; then
          [ -n "${pgFwdVal}" ] && addPgFwd="<>${pgFwdVal}"
        else
          [[ "${DUMP_PG_FWD}" != 0 ]] && addPgFwd="<>${DUMP_PG_FWD}"
        fi

        BROWSER_URL_DUMP_HASHES["${brwsr}"]+=" ${url_urlOptsArr[0]}${addPgFwd}"
      else
        BROWSER_URL_HASHES["${brwsr}%%${brwsrType}"]+=" ${url_urlOptsArr[0]}"
      fi
    fi
  done
}

# finalizeConfigurationsAndExecuteBrowser:
#   Finalize configurations and execute browser for one or more URLs.
finalizeConfigurationsAndExecuteBrowser() {
  local browser="${1}"
  local browserType="${2}" # 'GUI' or 'TERM'
  local dump="${3}"
  local dumpPgFwd="${4}"
  local urls="${@: 5}"

  # Quotes must be put around URLs because otherwise they will fail to open
  # correctly if they contain special bash characters such as the AND and OR
  # operators.
  local urlsArr=(${urls})
  local termTtl
  for url in "${urlsArr[@]}"; do
    local urlsNew+=" '${url}'"
    if [ "${browserType}" = 'TERM' ]; then
      ttlStrt="${url: 6}"
      { [ "${#urlsArr[@]}" -ge 3 ] && termTtl+="...${ttlStrt%%\?*}"; } || \
      { [ "${#urlsArr[@]}" -gt 1 ] && termTtl+="...${ttlStrt%%&*}"; } || \
          termTtl="${url}"
    fi
  done
  urls="${urlsNew}"

  if [ "${browserType}" = 'TERM' ]; then
    [ "${#urlsArr[@]}" -gt 1 ] && termTtl+='...'
  fi

  if [[ "${browser}" = *';;'* ]]; then
    local postRunCmd="${browser##*';;'}"
    browser="${browser%';;'*}"
  fi

  if [ "${dump}" = 'true' ]; then
    cmd="${browser} -dump ${urls} | less ${LESS_COMMAND_OPTIONS} +${dumpPgFwd}p"
    TERMINAL "${termTtl}" "${cmd}"
  else
    if [ "${browserType}" = 'GUI' ]; then
      if [[ "${browser}" = '::'* ]]; then
        browser="${browser#*'::'}"

        local urlsArr=(${urls})
        for url in "${urlsArr[@]}"; do
          eval nohup "${browser} ${url}" &>/dev/null &
        done
      else
        eval nohup "${browser} ${urls}" &>/dev/null &
      fi
    else
      TERMINAL "${termTtl}" "${browser} ${urls}"
    fi
  fi

  if [ -n "${postRunCmd}" ]; then
    eval "${postRunCmd}"
  fi
}

# ===================================================
#   Open URL arguments and exit if any are
# ===================================================

topLevlDomnsRegex="$(echo "${URL_MATCH_TOP_LEVEL_DOMAINS}" | tr -s ' ')"
topLevlDomnsRegex="${topLevlDomnsRegex//'.'/'\.'}"

regex='('                               # begin prefix group
regex+='www\.|'                         # match "www." as a valid prefix
regex+='(http[s]?|ftp|file):\/\/'       # match schemes
regex+=')'                              # end prefix group
regex+='\S+'     # ensure prefix is followed by one or more non-space characters
regex+='|'                              # or match the following
regex+='\S+'     # ensure suffix is preceded by one or more non-space characters
regex+='('                              # begin suffix group
regex+="${topLevlDomnsRegex// /|}"      # match top level domains
regex+=')'                              # end suffix group
regex+='\S*'                            # include trailing non-space characters

URLS_FOR_DIRECT_OPEN=($(echo "${@}" | perl -ne "
  while (m/(${regex})/g) { print \"'\$1' \"; }
"))

if [ "${#URLS_FOR_DIRECT_OPEN[@]}" -ge 1 ]; then
  if [ "${OPT_OUTPUT_TO_CLIPBOARD}" = 'true' ]; then
    echo -e 'openurl: option -c not allowed when opening URLs directly' 1>&2
    exit 1
  fi

  finalizeConfigurationsAndExecuteBrowser "${BROWSER_COMMAND}" \
      "${BROWSER_COMMAND_BROWSER_TYPE}" "${DUMP}" "${DUMP_PG_FWD}" \
      "${URLS_FOR_DIRECT_OPEN[@]}"
  exit
fi

# ===================================================
#   Get and parse the URLs of one or more alias(es) if the arguments match one
#   or more aliases
# ===================================================

# Argument cases:
#   First argument only used as alias:
#     Use the first argument as an alias and all remaining arguments as one or
#     more search queries for the alias's URLs if the alias was found (note:
#     there will always be at least one URL returned for a found alias). Use all
#     arguments as one or more search queries with the default search URL
#     otherwise and if the respective configuration is set respectively.
# 
#   All arguments used as aliases (switch -m):
#     Use each argument after the first as an alias until no more aliases are
#     found and use all remaining arguments as one or more search queries for
#     the aliases URLs if the first argument is a found alias. Print a message
#     and exit otherwise.

if [ "${OPT_MULTIPLE_ALIASES}" = 'true' ]; then
  aliasesFileParserArgs="${@}"
else
  aliasesFileParserArgs="${1}"
fi

aliasesFileParserOut="$("${HERE}/aliases-file-parser.pl" \
    "${URL_ALIASES_FILES_DIRECTORY}" "${URL_ALIASES_FILES_STR}" \
    ${aliasesFileParserArgs})"

if [ -n "${aliasesFileParserOut}" ]; then
  if [[ "${aliasesFileParserOut}" = 'error:'* ]]; then
    echo "error in URL aliases file ${aliasesFileParserOut#'error:'}" 1>&2
    exit 1
  elif [[ "${aliasesFileParserOut}" = 'error_:'* ]]; then
    echo "error in arguments: ${aliasesFileParserOut#'error_:'}" 1>&2
    exit 1
  fi

  initBrowserCmd="${BROWSER_COMMAND}"
  initDump="${DUMP}"
  initDumpPgFwd="${DUMP_PG_FWD}"

  declare -gA BROWSER_URL_HASHES
  declare -gA BROWSER_URL_DUMP_HASHES

  aliases_aliasOpts_urls_urlsOpts=(${aliasesFileParserOut//'<&>'/ })

  numAliasesMtchd="${#aliases_aliasOpts_urls_urlsOpts[@]}"
  urlSearchPlaceholderParserArgs="${@: $((numAliasesMtchd + 1))}"

  for alias_aliasOpts_urls_urlsOpts_indx in \
      "${!aliases_aliasOpts_urls_urlsOpts[@]}"; do

    alias_aliasOpts_urls_urlsOpts="\
      ${aliases_aliasOpts_urls_urlsOpts[${alias_aliasOpts_urls_urlsOpts_indx}]}"

    # Variable formats quick reference:
    #   "aliasOpts_urls_urlsOpts[0]" (will not exist if alias has no options):
    #     "[alias_opt1[<>alias_opt2]]"
    #   "aliasOpts_urls_urlsOpts[1]" (will always contain at least one URL):
    #     "URL1[<>opt1[<>opt2]][<|>URL2[<>opt1[<>opt2]][<|>URL3[<>opt1[
    #     <>opt2]]...]]"
    #   "ALIAS_OPTS" (array; may be empty):
    #     ( [ "alias_opt1" "alias_opt2" ] )
    #   "URLS_URLSOPTS" (array; will always contain at least one element):
    #     ( "URL1[<>opt1[<>opt2]]" [ "URL2[<>opt1[<>opt2]]" ... ] )

    aliasOpts_urls_urlsOpts=(${alias_aliasOpts_urls_urlsOpts//'<$>'/ })

    setUpUrlsUrlsOptsArr() {
      local urlSrchPlhParserOut="$("${HERE}/search-placeholder-url-parser.pl" \
          "${aliasOpts_urls_urlsOpts["${1}"]}" \
          ${urlSearchPlaceholderParserArgs})"
      [[ "${urlSrchPlhParserOut}" = 'error:'* ]] && \
          echo -e "error in URL aliases file: ${urlSrchPlhParserOut#'error:'}" \
          1>&2 && exit 1
      URLS_URLSOPTS=(${urlSrchPlhParserOut//'<|>'/ })
    }

    if [ ${#aliasOpts_urls_urlsOpts[@]} -eq 1 ]; then
      setUpUrlsUrlsOptsArr '0' "${@}"
    else
      if [ -z "${CONFIG_OPT_SET}" ]; then
        ALIAS_OPTS=(${aliasOpts_urls_urlsOpts[0]//'<>'/ })
        argNum=$((alias_aliasOpts_urls_urlsOpts_indx + 1))
        processAliasConfigurations "${!argNum}"
      fi

      setUpUrlsUrlsOptsArr '1' "${@}"
    fi

    if [ "${OPT_OUTPUT_TO_CLIPBOARD}" = 'true' ]; then
      for url_urlOpts in "${URLS_URLSOPTS[@]}"; do
        url_urlOptsArr=(${url_urlOpts//'<>'/ })
        URLS_FOR_X11_CLIPBOARD+=("${url_urlOptsArr[0]}")
      done
      continue
    fi

    # Create hashes for URLs using the same browser command so they can be
    # opened with it once.
    createBrowserCommandUrlsHashes

    for brwsr_brwsrType in "${!BROWSER_URL_HASHES[@]}"
    do
      brwsr="${brwsr_brwsrType%'%%'*}"
      brwsrType="${brwsr_brwsrType#*'%%'}"
      urls="${BROWSER_URL_HASHES["${brwsr_brwsrType}"]}"

      if [ "${OPEN_TERM_BROWSER_URLS_IN_INDIVIDUAL_WINDOWS}" = 'true' ] && [ \
          "${brwsrType}" = 'TERM' ]; then
        for url in ${urls[@]}; do
          finalizeConfigurationsAndExecuteBrowser "${brwsr}" ${brwsrType} \
              false 0 "${url}"
        done
      else
        [ "${alias_aliasOpts_urls_urlsOpts_indx}" -eq \
            "$(("${#aliases_aliasOpts_urls_urlsOpts[@]}" - 1))" ] && 
            finalizeConfigurationsAndExecuteBrowser "${brwsr}" ${brwsrType} \
                false 0 "${urls[@]}"
      fi
    done

    for brwsr in "${!BROWSER_URL_DUMP_HASHES[@]}"
    do
      urls_urlsDumpPgFwd="${BROWSER_URL_DUMP_HASHES["${brwsr}"]}"

      for urls_urlDumpPgFwd in ${urls_urlsDumpPgFwd[@]}; do
        urls_urlDumpPgFwd=(${urls_urlDumpPgFwd//'<>'/ })

        [ "${#urls_urlDumpPgFwd[@]}" -gt 1 ] && \
            pgFwd="${urls_urlDumpPgFwd[1]}" || pgFwd='0'

        finalizeConfigurationsAndExecuteBrowser "${brwsr}" 'TERM' true \
            "${pgFwd}" "${urls_urlDumpPgFwd[0]}"
      done
    done

    BROWSER_COMMAND="${initBrowserCmd}"
    DUMP="${initDump}"
    DUMP_PG_FWD="${initDumpPgFwd}"
  done #!for each alias options and URLs

else
  if [ "${OPT_MULTIPLE_ALIASES}" = 'true' ]; then
    echo 'openurl: no aliases found'
    exit
  fi

  if [ "${SEARCH_IF_ALIAS_NOT_FOUND}" != 'true' ]; then
    echo "openurl: alias \"${1}\" not found"
    exit
  fi

  dfltSrchUrlPrsd="$("${HERE}/search-placeholder-url-parser.pl" \
      "${DEFAULT_SEARCH_URL}" "${@}")"

  if [ "${OPT_OUTPUT_TO_CLIPBOARD}" = 'true' ]; then
    URLS_FOR_X11_CLIPBOARD=("${dfltSrchUrlPrsd}")
  else
    finalizeConfigurationsAndExecuteBrowser "${BROWSER_COMMAND}" \
        "${BROWSER_COMMAND_BROWSER_TYPE}" "${DUMP}" "${DUMP_PG_FWD}" \
        "${dfltSrchUrlPrsd}"
  fi
fi

if [ "${#URLS_FOR_X11_CLIPBOARD[@]}" -gt 0 ]; then
  echo "${URLS_FOR_X11_CLIPBOARD[@]}" | xclip -r -selection c
fi

