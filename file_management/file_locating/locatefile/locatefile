#!/usr/bin/env bash
# 
# File:
#   locatefile
# 
# Description:
#   Locate a file or directory from a file paths database.
# 

readonly HERE="$(dirname "${0}")"
source "${HERE}/configurations"

printHelpMessage() {
  echo -ne "\
locatefile

Usage:
  locatefile [options] <file or directory>

Options:
  -o <return occurrence>    return the specified occurrence
  -d           return a directory instead of a file
  -h           show help message
"
}

while getopts :o:dh OPT; do
  case "${OPT}" in
    o) if [[ ! "${OPTARG}" =~ ^[0-9]+$ ]]; then
         echo "locatefile: invalid value \"${OPTARG}\" for option -o" 1>&2
         exit 1
       else
         if [ -z "${OPTARG}" ]; then
           echo 'locatefile: missing argument for option -o' 1>&2
           exit 1
         fi
         OPT_RET_OCCUR_NO="${OPTARG}"
       fi
       ;;
    d) OPT_RET_DIRS='true'
       ;;
    h) printHelpMessage
       exit
       ;;
    \?)
       echo "locatefile: option \"${OPTARG}\" is unknown" 1>&2
       exit 1
       ;;
  esac
done
shift $((OPTIND - 1))

if [ $# -eq 0 ]; then
  echo 'locatefile: no file or directory name specified' 1>&2
  exit 1
fi

# ========================================================
#   Get the mounted mountpoint paths defined by MNTPNT_PATHS
# ========================================================

for mntpntPath in "${MNTPNT_PATHS[@]}"; do
  if [ -d "${mntpntPath}" ] && mountpoint "${mntpntPath}" >/dev/null; then
    mntpntPathsTmp+=("${mntpntPath}")
  fi
done

MNTPNT_PATHS=("${mntpntPathsTmp[@]}")

# ========================================================
#   Search the database
# ========================================================

if [ "${OPT_RET_DIRS}" = 'true' ]; then
  CURR_DB_DIR="${DIR_PATHS_DB_DIR}"
else
  CURR_DB_DIR="${FILE_PATHS_DB_DIR}"
fi

for dbFileName in "${DB_FILE_NAMES[@]}"
do
  if [ ! -f "${CURR_DB_DIR}/${dbFileName}" ]; then
    continue
  fi

  for mtch in $(grep -P "(?<=/)([^/]*)(?=[^/]*${1}[^/]*$)" \
      "${CURR_DB_DIR}/${dbFileName}"); do

    if [[ "${mtch}" = '{MNTPNT_PATH}/'* ]]; then
      for mntpntPath in "${MNTPNT_PATHS[@]}"; do
        mntpntPathMtchPrsd="${mtch//'{MNTPNT_PATH}'/"${mntpntPath}"}"

        if [[ ("${OPT_RET_DIRS}" = 'true' && -d "${mntpntPathMtchPrsd}") || \
            -f "${mntpntPathMtchPrsd}" ]]
        then
          FOUND_MATCHES+=("${mntpntPathMtchPrsd}")
          ((CURR_OCCUR_NO++))
          
          if [ -n "${OPT_RET_OCCUR_NO}" ] && [ "${OPT_RET_OCCUR_NO}" -eq \
              "${CURR_OCCUR_NO}" ]; then
            break 3
          fi
        fi
      done
    else
      FOUND_MATCHES+=("${mtch}")
      ((CURR_OCCUR_NO++))

      if [ -n "${OPT_RET_OCCUR_NO}" ] && [ "${OPT_RET_OCCUR_NO}" -eq \
          "${CURR_OCCUR_NO}" ]; then
        break 2
      fi
    fi
  done
done

if [ "${#FOUND_MATCHES[@]}" -gt 0 ]; then
  if [ -n "${OPT_RET_OCCUR_NO}" ]; then
    echo "${FOUND_MATCHES[$((${#FOUND_MATCHES[@]} - 1))]}"
  else
    echo "${FOUND_MATCHES[0]}"
  fi
fi

