#!/usr/bin/env bash
# 
# File:
#   updatedb
# 
# Description:
#   Update the file and directory paths databases.
# 

readonly HERE="$(dirname "${0}")"
source "${HERE}/CONFIGURATIONS"

# ============================================
#   Create the main functions
# ============================================

# find_out
#   Recursively search through a file or directory and output all found files or
#   directories to a file.
#   Parameters:
#     1. Type of file to output: "f" for files and "d" for directories
#     2. Maximum depth to search (e.g. "0" for no depth [and to output just the
#        file itself] and "1" for the first level subdirectory)
#     3. Path of file where output will be sent
#     4. Path of file or directory to search through (note: accepts wildcards)
#     5. (Optional) Whether or not to disclude dot files; pass "--nodot" for
#        true
find_out() {
  if [ $# -le 3 ] || [ $# -ge 6 ]; then
    echo 'updatedb: invalid number of arguments' 1>&2
    exit 1
  fi

  if [ ! -f "${4}" ] && [ ! -d "${4}" ]; then
    echo -e "updatedb: ’${4}’: No such file or directory"
    return 1
  fi

  findOpts="-maxdepth ${2} -type ${1}"

  if [ "${5}" = '--nodot' ]; then
    find "${4}" ${findOpts} ! -path '*/\.*' >> "${3}"
  else
    find "${4}" ${findOpts} >> "${3}"
  fi
}

# ============================================
#   Prepare the database directories
# ============================================

if [ ! -d "${FILE_PATHS_DATABASE_DIRECTORY}" ]; then
  mkdir "${FILE_PATHS_DATABASE_DIRECTORY}"
elif [ "${REMOVE_DATABASE_FILES_BEFORE_UPDATING_DATABASES}" = 'true' ]; then
  rm -Rf "${FILE_PATHS_DATABASE_DIRECTORY}"/*
fi

if [ ! -d "${DIRECTORY_PATHS_DATABASE_DIRECTORY}" ]; then
  mkdir "${DIRECTORY_PATHS_DATABASE_DIRECTORY}"
elif [ "${REMOVE_DATABASE_FILES_BEFORE_UPDATING_DATABASES}" = 'true' ]; then
  rm -Rf "${DIRECTORY_PATHS_DATABASE_DIRECTORY}"/*
fi

# ============================================
#   Populate the databases
# ============================================

source "${HERE}/FILEPATHS"

# ============================================
#   Process the mountpoint directory paths
# ============================================

for dbDir in "${FILE_PATHS_DATABASE_DIRECTORY}" \
    "${DIRECTORY_PATHS_DATABASE_DIRECTORY}"; do

  for dbFileName in "${DATABASE_FILE_NAMES[@]}"; do
    dbFile="${dbDir}/${dbFileName}"

    if [ -f "${dbFile}" ]; then
      for mntpntPath in "${MOUNTPOINT_PATHS[@]}"; do
        [ -z "${mntpntPath##*'/'}" ] && mntpntPath="${mntpntPath::-1}"
        sed -i "s,${mntpntPath}/,{MNTPNT_PATH}/," "${dbFile}"
      done
    fi
  done

done

